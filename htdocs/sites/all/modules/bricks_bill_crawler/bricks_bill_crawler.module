<?php

function bricks_bill_crawler_admin_paths_alter(&$paths) {
  $paths['node/*/edit'] = TRUE;
}

/** 
 * Implements hook_theme().
 */ 
function bricks_bill_crawler_theme($existing, $type, $theme, $path) {
    
  return array(
    'bill_node_form' => array(
      'render element' => 'form',
      'template' => 'bill-node-form',
      'path' => drupal_get_path('module', 'bricks_bill_crawler'),
    ),
  );
}

/** 
 * Preprocessor for theme('bill_node_form').
 */
function template_preprocess_bill_node_form(&$variables) {
  
}

/* 
 * Implements hook_node_update().
 */
function bricks_bill_crawler_node_update($node) {
  // wenn Order crawled, dann Rechnung erstellen
  if ($node->type == 'orders' && $node->field_order_crawled[$node->language][0]["value"] == 1) {
    // prüfen auf vorhandene Rechnung
    $order_bill = bricks_bill_crawler_load_bill_nodes($node->title);
    if (!empty($order_bill)) {
      drupal_set_message('Rechnung vorhanden');      
    }
    else {
      // Rechnungssprache festlegen
      $language = 'en';
      if ($node->field_order_country[$node->language][0]["value"] == 'Germany' || $node->field_order_country[$node->language][0]["value"] == 'Austria') {
        $language = 'de';
      }
      // Objekt anlegen
      $bill_node = new stdClass();
      // Typ festlegen
      $bill_node->type = 'bill';
      // default Werte setzen
      node_object_prepare($bill_node);
      // UID auf Admin setzen
      $bill_node->uid = 1;
      // Sprache auf neutral setzen
      $bill_node->language = LANGUAGE_NONE;
      // OrderID als Titel setzen
      $bill_node->title = $node->title;
      // Rechnungssprache setzen
      $bill_node->field_bill_language[$node->language][0]["value"] = $language;
      // Rechnungsnummer setzen
      $bill_node->field_bill_number[$node->language][0]["value"] = date('y') . '/BL' . $node->title;
      // Rechnungsdatum setzen
      $bill_node->field_bill_invoice_date[$node->language][0]["value"] = date('d.m.Y');
      // Lieferdatum setzen
      $bill_node->field_bill_delivery_date[$node->language][0]["value"] = date('d.m.Y');
      // Zahlungsziel setzen
      $bill_node->field_bill_term_of_payment[$node->language][0]["value"] = $language == 'de' ? 'sofort fällig' : 'immediately due and payable';
      // Anrede setzen
      $address_array = explode('<BR>', $node->field_order_address[$node->language][0]["value"]);
      $bill_node->field_bill_salutation[$node->language][0]["value"] = $address_array[0];
      // Adresse setzen
      $bill_node->field_bill_address[$node->language][0]["value"] = $node->field_order_address[$node->language][0]["value"];
      
      // Order Items setzen
      $sum_extra_parts = 0;
      $item_numbers = 1;
      $number_standard_items = 0;      
      $number_extra_items = 0;
      
      foreach ($node->field_orderitemid[$node->language] as $key => $value) {
        // extra items
        if ($node->field_orderitemtype[$node->language][$key]['value'] == 'S' && $node->field_orderitemprice[$node->language][$key]['value'] >= 50) {
          $number_extra_items++;
          $bill_node->field_bill_items_item[$node->language][]["value"] = $item_numbers;
          $bill_node->field_bill_items_number[$node->language][]["value"] = $node->field_itemid[$node->language][$key]['value'];
          if ($node->field_itemid[$node->language][$key]['value'] == 'N') {
            $is_used_or_new .= $language == 'de' ? '(Neu)' : '(New)';
          }
          else {
            $is_used_or_new .= $language == 'de' ? '(Gebraucht)' : '(Used)';
          }
          $bill_node->field_bill_items_description[$node->language][]["value"] = 'LEGO ' . $node->field_itemid[$node->language][$key]['value'] . ' - ' . $node->field_orderitemlabel[$node->language][$key]['value'] . "<br />" . $is_used_or_new;
          $bill_node->field_bill_items_quantity[$node->language][]["value"] = $node->field_orderitemqty[$node->language][$key]['value'];
          $bill_node->field_bill_items_unit_price[$node->language][]["value"] = $node->field_orderitemprice[$node->language][$key]['value'];
          $bill_node->field_bill_items_total_price[$node->language][]["value"] = $node->field_orderitemqty[$node->language][$key]['value'] * $node->field_orderitemprice[$node->language][$key]['value'];
          $sum_extra_parts = ($node->field_orderitemqty[$node->language][$key]['value'] * $node->field_orderitemprice[$node->language][$key]['value']) + $sum_extra_parts;
          $item_numbers++;
        }
        // standard items
        else {
          $number_standard_items++;
        }
      }
      
      // Versand setzen 
      $bill_node->field_shipping_packaging[$node->language][0]["value"] = $node->field_ordershipping[$node->language][0]["value"] + $node->field_orderinsurance[$node->language][0]["value"] + $node->field_orderaddchrg1[$node->language][0]["value"]; 
    
      // standard item setzen
      if ($number_standard_items > 0) {             
        $bill_node->field_bill_items_item[$node->language][]["value"] = $item_numbers;
        $bill_node->field_bill_items_number[$node->language][]["value"] = 1;
        $bill_node->field_bill_items_description[$node->language][]["value"] = $language == 'de' ? 'LEGO Einzelteile' : 'LEGO Parts';
        $bill_node->field_bill_items_quantity[$node->language][]["value"] = 1;
        $bill_node->field_bill_items_unit_price[$node->language][]["value"] = $node->field_basegrandtotal[$node->language][0]["value"] - $bill_node->field_shipping_packaging[$node->language][0]["value"] - $sum_extra_parts;
        $bill_node->field_bill_items_total_price[$node->language][]["value"] = $node->field_basegrandtotal[$node->language][0]["value"] - $bill_node->field_shipping_packaging[$node->language][0]["value"] - $sum_extra_parts;        
      }
      
      $bill_node->field_sub_total[$node->language][0]["value"] = $node->field_basegrandtotal[$node->language][0]["value"];
      $bill_node->field_grand_total[$node->language][0]["value"] = $node->field_basegrandtotal[$node->language][0]["value"];
      
      if ($node->field_paycurrencycode[$node->language][0]["value"] == 'EUR') {
        $bill_node->field_grand_total_in_payment[$node->language][0]["value"] = $node->field_order_pay_grand_total[$node->language][0]["value"];
      }
      
      
      // Zahlungstyp setzen
      switch ($node->field_paymenttype[$node->language][0]["value"]) {
        case 'PayPal.com':
          $bill_node->field_bill_paymenttype[$node->language][0]["value"] = $language == 'de' ? 'PayPal' : 'PayPal';
          break;
          
        case 'IBAN':
          $bill_node->field_bill_paymenttype[$node->language][0]["value"] = $language == 'de' ? 'Überweisung' : 'bank transfer';          
          break;        
          
        case 'Bank Transfer':
          $bill_node->field_bill_paymenttype[$node->language][0]["value"] = $language == 'de' ? 'Überweisung' : 'bank transfer';          
          break;
        
        
        default:
          
          break;
      }
      
      // Node speichern
      if ($bill_node = node_submit($bill_node)) {
        node_save($bill_node);      
      }
    }
  }
}

/* 
 * Implements hook_menu().
 */
function bricks_bill_crawler_menu() {
//  $items['admin/bill_crawler'] = array(
//    'title' => 'Bricks bill crawler',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('bricks_bill_crawler_xml_upload_form'),
//    'access arguments' => array('access content overview'),
//  );
  $items['admin/bill_crawler'] = array(
    'title' => 'Bricks bill crawler',
    'page callback' => 'bricks_bill_crawler_start_crawler_test',
    'access arguments' => array('access content overview'),
  );
  
  
  return $items;
}

/*
 * get one order from website
 */
function bricks_bill_crawler_get_order($login_session, $order_id) {
  $order_url = 'http://www.bricklink.com/orderDetail.asp?ID=' . $order_id;
  curl_setopt($login_session, CURLOPT_URL, $order_url);
  $order_data = curl_exec($login_session);
  
  if (strpos($order_data, 'Object Moved')) {
    return false;
  }
  else {
    return $order_data;
  }
}

/*
 * get one item from website
 */
function bricks_bill_crawler_get_item($login_session, $item_id) {
  $item_url = 'http://www.bricklink.com/catalogItem.asp?S=' . $item_id;
  curl_setopt($login_session, CURLOPT_URL, $item_url);
  $item_data = curl_exec($login_session);
  
  if (strpos($item_data, 'No Item(s) were found. Please try again!')) {
    return false;
  }
  else {
    return $item_data;
  }
}

/*
 * crawl order
 */ 
function bricks_bill_crawler_order_crawl($order) {
  include_once('simple_html_dom.php');
  $buyer = array();
  $html = str_get_html($order);
  foreach($html->find('table', 0)->find('font', 1)->find('table', 0)->find('tr', 0)->find('table', 1)->find('tr', 6)->find('b') as $element) {
   $buyer['pay_grand'] = strip_tags((string) $element);
  }
  $start_pos_buyer_block = stripos($order, '<b>Buyer Information</b>');
  $end_pos_buyer_block = stripos($order, '<b>Seller Information</b>');
  $buyer_block = substr($order, $start_pos_buyer_block, ($end_pos_buyer_block-$start_pos_buyer_block));
  preg_match('/HREF="mailto:(.*)">/isU', $buyer_block, $email_match);
  $buyer['email'] = $email_match[1];
  preg_match('/Name & Address:<\/TD><TD WIDTH="75%">(.*)<\/TD>/isU', $buyer_block, $address_match);
  $buyer['address'] = $address_match[1];
  $country_pos = strripos($buyer['address'], '<BR>');  
  $buyer['country'] = substr($buyer['address'], ($country_pos + 4));
  //preg_match('/<td>Grand Total:(.*)/isU', $order, $total_grand);
  
  
  if (!empty($buyer['email']) && !empty($buyer['address']) && !empty($buyer['country'])) {
    return $buyer;
  }
  else {    
    return false;
  }  
}
/*
 * crawl item
 */ 
function bricks_bill_crawler_item_crawl($item) {
  include_once('simple_html_dom.php');
  $label = '';
  $html = str_get_html($item);
  foreach($html->find('table center font[face="Geneva,Arial,Helvetica"] b') as $element) {
    $label = $element;
  }
  if ($label != '') {
    return $label;
  }
  else {    
    return false;
  }  
}

/*
 * start crawler test
 */
function bricks_bill_crawler_start_crawler_test() {
  $login_session = bricks_bill_crawler_login_bricklink();
  $item = bricks_bill_crawler_get_order($login_session, '3654022');
  $crawl_order = bricks_bill_crawler_order_crawl($item);var_dump($crawl_order);
} 

/*
 * start crawler
 */
function bricks_bill_crawler_start_crawler() {
  // login
  $login_session = bricks_bill_crawler_login_bricklink();
  
  if ($login_session != false) {
    // load open order nodes
    $order_nodes = bricks_bill_crawler_load_order_nodes();
    foreach ($order_nodes as $order_node) {
      // node load
      $order_node = node_load($order_node->nid);
      // read order page
      $order = bricks_bill_crawler_get_order($login_session, $order_node->title);
      if ($order == false) {
        watchdog('Bricks bill crawler', 'No Order data by NID: %nid', array('%nid' => $order_node->nid), WATCHDOG_ERROR);
        continue;
      }
      // crawl order
      $crawl_order = bricks_bill_crawler_order_crawl($order);
      if ($crawl_order == false) {
        watchdog('Bricks bill crawler', 'Crawler with no result by NID: %nid', array('%nid' => $order_node->nid), WATCHDOG_ERROR);
        continue;
      }
      // crawl item label    
      foreach ($order_node->field_orderitemid[$order_node->language] as $key => $value) {
        if ($order_node->field_orderitemprice[$order_node->language][$key]["value"] >= 50 && $order_node->field_orderitemtype[$order_node->language][$key]["value"] == 'S') {
          // read item page
          $item = bricks_bill_crawler_get_item($login_session, $order_node->field_itemid[$order_node->language][$key]["value"]);
          if ($item == false) {
            watchdog('Bricks bill crawler', 'No Item data by NID: %nid', array('%nid' => $order_node->nid), WATCHDOG_ERROR);
            continue;
          }
          // crawl item
          $label = bricks_bill_crawler_item_crawl($item);
          if ($label == false) {
            watchdog('Bricks bill crawler', 'No Item label by NID: %nid', array('%nid' => $order_node->nid), WATCHDOG_ERROR);
            continue;
          }
          $order_node->field_orderitemlabel[$order_node->language][$key]["value"] = $label;
        }
      }
      // save crawler values
      $order_node->field_order_email[$order_node->language][0]['email'] = $crawl_order['email'];
      $order_node->field_order_address[$order_node->language][0]['value'] = $crawl_order['address'];
      $order_node->field_order_country[$order_node->language][0]['value'] = $crawl_order['country'];
      $order_node->field_order_pay_grand_total[$order_node->language][0]['value'] = $crawl_order['pay_grand'];
      $order_node->field_order_crawled[$order_node->language][0]['value'] = 1;
      node_save($order_node);
      
    }
  }
  else {
    watchdog('Bricks bill crawler', 'Login not available', '', WATCHDOG_ERROR);
  }  
  curl_close($login_session);
}

/**
 * Implements hook_cron().
 */
function bricks_bill_crawler_cron() {
  bricks_bill_crawler_start_crawler();
}

/*
 * login to bricklink
 */
function bricks_bill_crawler_login_bricklink() {
  
  $login_url = 'https://www.bricklink.com/login.asp?logInTo=&logFolder=p&logSub=w'; 
  
  $post_fields = array(
    'logFrmFlag' => 'Y',
		'a' => 'a',
		'frmUsername' => urlencode('44bricks'),
		'frmPassword' => urlencode('16022011DD'),
		'submit' => 'Login to BrickLink'
	);
  
	$post_fields_string = '';
	foreach($post_fields as $key=>$value) { 
		$post_fields_string .= $key.'='.$value.'&'; 
	}

  $curl = curl_init();  
  curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC ) ; 
  curl_setopt($curl, CURLOPT_USERPWD, "44bricks:16022011DD"); 
  curl_setopt($curl, CURLOPT_SSLVERSION,3); 
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE); 
  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2); 
  curl_setopt($curl, CURLOPT_HEADER, true); 
  curl_setopt($curl, CURLOPT_POST, true); 
  curl_setopt($curl, CURLOPT_POSTFIELDS, $post_fields_string ); 
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); 
  curl_setopt($curl, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)"); 
  curl_setopt($curl, CURLOPT_URL, $login_url);
  curl_exec($curl);
  
  // test login
  curl_setopt($curl, CURLOPT_URL, 'http://www.bricklink.com/my.asp');
  $order_data = curl_exec($curl);
  if (strpos($order_data, 'Object Moved')) {
    return false;
  }
  else {
    return $curl;
  }
}

/*
 * load order nodes to crawl
 */
function bricks_bill_crawler_load_order_nodes($limit = 10) {
  $order_nodes = array();
  $query = new EntityFieldQuery;

  $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'orders')
        ->fieldCondition('field_order_crawled', 'value', 0, '=')
        ->range(0, $limit);
    
  foreach ($query->execute() as $entity_type => $entities) {
      foreach ($entities as $entity_id => $entity) {
        $order_nodes[] =  $entity;
      }
  }
    
  return $order_nodes;
}

/*
 * load bill node to check
 */
function bricks_bill_crawler_load_bill_nodes($title) {
  $bill_nodes = array();
  $query = new EntityFieldQuery;

  $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'bill')
        ->propertyCondition('title', $title)
        ->range(0, 1);
    
  foreach ($query->execute() as $entity_type => $entities) {
      foreach ($entities as $entity_id => $entity) {
        $bill_nodes[] =  $entity;
      }
  }
    
  return $bill_nodes;
}

function br2nl($string) {
  return preg_replace('/\<br(\s*)?\/?\>/i', "\n", $string);
}            